/**
* Sets the arm position for both arms to the given ArmMotionId. If you
* use 'useDefault', arms will have the default position generated by
* the walking engine.
*
* @param motion Motion to set for both arms.
* @param fast set to true if you do not want arm motions to be interpolated.
* @param autoReverse set to true if you do want to automatically take arms back after certain time.
* @param autoReverseTime Time after which arm is automatically taken back if
*     autoReverse is set to true.
*/
option(Arms, ArmMotionRequest::ArmMotionId motion, bool fast = false,
  bool autoReverse = false, int autoReverseTime = 0)
{
  initial_state(setRequest)
  {
    transition
    {
      if (theArmMotionEngineOutput.arms[ArmMotionRequest::left].move && theArmMotionEngineOutput.arms[ArmMotionRequest::left].motion == motion &&
          theArmMotionEngineOutput.arms[ArmMotionRequest::right].move && theArmMotionEngineOutput.arms[ArmMotionRequest::right].motion == motion)
        goto requestIsExecuted;
    }
    action
    {
      theArmMotionRequest.motion[ArmMotionRequest::left] = motion;
      theArmMotionRequest.fast[ArmMotionRequest::left] = fast;
      theArmMotionRequest.autoReverse[ArmMotionRequest::left] = autoReverse;
      theArmMotionRequest.autoReverseTime[ArmMotionRequest::left] = autoReverseTime;

      theArmMotionRequest.motion[ArmMotionRequest::right] = motion;
      theArmMotionRequest.fast[ArmMotionRequest::right] = fast;
      theArmMotionRequest.autoReverse[ArmMotionRequest::right] = autoReverse;
      theArmMotionRequest.autoReverseTime[ArmMotionRequest::right] = autoReverseTime;
    }
  }

  target_state(requestIsExecuted)
  {
    transition
    {
      if (!theArmMotionEngineOutput.arms[ArmMotionRequest::left].move || theArmMotionEngineOutput.arms[ArmMotionRequest::left].motion != motion ||
          !theArmMotionEngineOutput.arms[ArmMotionRequest::right].move || theArmMotionEngineOutput.arms[ArmMotionRequest::right].motion != motion)
        goto setRequest;
    }
    action
    {
      theArmMotionRequest.motion[ArmMotionRequest::left] = motion;
      theArmMotionRequest.fast[ArmMotionRequest::left] = fast;
      theArmMotionRequest.autoReverse[ArmMotionRequest::left] = autoReverse;
      theArmMotionRequest.autoReverseTime[ArmMotionRequest::left] = autoReverseTime;

      theArmMotionRequest.motion[ArmMotionRequest::right] = motion;
      theArmMotionRequest.fast[ArmMotionRequest::right] = fast;
      theArmMotionRequest.autoReverse[ArmMotionRequest::right] = autoReverse;
      theArmMotionRequest.autoReverseTime[ArmMotionRequest::right] = autoReverseTime;
    }
  }
}