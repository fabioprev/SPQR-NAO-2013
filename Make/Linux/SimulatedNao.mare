
SimulatedNao = cppDynamicLibrary + {
  dependencies = { "Controller", "qtpropertybrowser", "libqxt" }

  root = "$(srcDirRoot)"

  files = {
    "$(srcDirRoot)/Modules/**.cpp" = cppSource,
    "$(srcDirRoot)/Modules/**.h",
    "$(srcDirRoot)/Platform/**.cpp" = cppSource,
    "$(srcDirRoot)/Platform/**.h",
    "$(srcDirRoot)/Processes/**.cpp" = cppSource,
    "$(srcDirRoot)/Processes/**.h",
    "$(srcDirRoot)/Representations/**.cpp" = cppSource,
    "$(srcDirRoot)/Representations/**.h",
    "$(srcDirRoot)/Tools/**.cpp" = cppSource,
    "$(srcDirRoot)/Tools/**.h",
    "$(utilDirRoot)/Utils/**.cpp" = cppSource,
    "$(utilDirRoot)/Utils/**.h",
    if platform != "Linux" { -"$(srcDirRoot)/Platform/Linux/**.cpp", -"$(srcDirRoot)/Platform/Linux/**.h" }
    if platform != "MacOSX" { -"$(srcDirRoot)/Platform/MacOS/**.cpp", -"$(srcDirRoot)/Platform/MacOS/**.h" }
    if platform != "Win32" { -"$(srcDirRoot)/Platform/Win32/**.cpp", -"$(srcDirRoot)/Platform/Win32/**.h" }
    if platform == "Linux" {
      -"$(srcDirRoot)/Platform/Linux/SystemCall.cpp",
      -"$(srcDirRoot)/Platform/Linux/SystemCall.h",
      -"$(srcDirRoot)/Platform/Linux/Robot.cpp",
      -"$(srcDirRoot)/Platform/Linux/Robot.h",
      -"$(srcDirRoot)/Platform/Linux/Main.cpp",
      -"$(srcDirRoot)/Platform/Linux/NaoBody.cpp",
      -"$(srcDirRoot)/Platform/Linux/NaoBody.h",
      -"$(srcDirRoot)/Platform/Linux/NaoCamera.cpp",
      -"$(srcDirRoot)/Platform/Linux/NaoCamera.h",
    },
  }

  defines += {
    "TARGET_SIM", "QT_SHARED", "QT_OPENGL_LIB", "QT_GUI_LIB", "QT_CORE_LIB", "QT_NO_STL"
    if platform == "Win32" { "NOMINMAX", "_CRT_SECURE_NO_DEPRECATE" }
    if configuration == "Develop" { -"NDEBUG" }
    if configuration != "Debug" { "QT_NO_DEBUG" }
  },

  includePaths = {
    "$(srcDirRoot)",
    "$(utilDirRoot)/qtpropertybrowser",
    "$(utilDirRoot)/Eigen",
    "$(utilDirRoot)/SimRobot/Src/SimRobot",
    "$(utilDirRoot)/SimRobot/Src/SimRobotCore2",
    "$(utilDirRoot)/SimRobot/Src/SimRobotEditor",
    "$(utilDirRoot)/snappy/include",
    "$(utilDirRoot)/libqxt",
    if platform == "Win32" {
      "$(srcDirRoot)/Platform/Win32"
      "$(utilDirRoot)/SimRobot/Util/qt/Win32/include",
      "$(utilDirRoot)/SimRobot/Util/qt/Win32/include/QtCore",
      "$(utilDirRoot)/SimRobot/Util/qt/Win32/include/QtGUI",
      "$(utilDirRoot)/SimRobot/Util/qt/Win32/include/QtOpenGL",
      "$(utilDirRoot)/SimRobot/Util/glew/Win32/include",
    }
    if platform == "Linux" {
      "$(buildDir)",
      "/usr/include/qt4/QtCore",
      "/usr/include/qt4/QtGui",
      "/usr/include/qt4/QtOpenGL",
      "/usr/include/qt4",
      "/usr/include/QtCore",
      "/usr/include/QtGui",
      "/usr/include/QtOpenGL",
      "/usr/include/Qt",
      "$(utilDirRoot)/SimRobot/Util/ode/Linux/include",
      "$(utilDirRoot)/PTracking/include",
      "$(utilDirRoot)/Utils"
    }
  },
  libPaths = {
    "$(buildDirRoot)/Controller/$(platform)/$(configuration)",
    "$(buildDirRoot)/qtpropertybrowser/$(platform)/$(configuration)",
    "$(buildDirRoot)/libqxt/$(platform)/$(configuration)",
    "$(utilDirRoot)/libjpeg/lib",
    "$(utilDirRoot)/PTracking/lib",
     if platform == "Linux" {
       if architecture == "x86_64" {
         "$(utilDirRoot)/snappy/lib/linux_x86_64",
       } else {
         "$(utilDirRoot)/snappy/lib/linux_x86",
       }
    }
    if platform == "Win32" {
      "$(utilDirRoot)/SimRobot/Util/qt/Win32/lib",
      if configuration == "Debug" {
        "$(utilDirRoot)/snappy/lib/Win32/Debug"
      } else {
        "$(utilDirRoot)/snappy/lib/Win32/Release"
      }
    }
  },
  libs = {
    "Controller", "qtpropertybrowser", "snappy", "qxt"
    if platform == "Win32" { "QtCore4", "QtGui4", "QtOpenGl4", "QtSvg4", "winmm", "opengl32", "glu32", "ws2_32", "libjpeg" }
    if platform == "Linux" { "rt", "pthread", "GLEW", "QtGui", "QtCore", "QtOpenGL", "QtSvg", "GLU", "GL" }
    if archName == "Linux64" { "jpeg-x64", "ptracking" }
    if archName == "Linux32" { "jpeg", "ptracking-32" }
  },
  cppFlags += {
    if tool == "vcxproj" {
      if configuration == "Develop" { -"/Ox /Ob2 /Oi /Ot /Oy /GT", "/Od /ZI" }
      if configuration == "Release" { "/wd4101 /GS-" }
    } else {
      "-mmmx -msse -msse2 -msse3 -mssse3"
      if configuration == "Develop" { -"-O3 -fomit-frame-pointer", "-g" }
    }
  }
  linkFlags += {
    //the rpath specifies a searchpath for dynamic libraries.
    if (platform == "Linux") { " -Wl,-rpath -Wl,${ORIGIN} "}
    if (platform == "MacOSX"){ " -Wl,-rpath -Wl,${ORIGIN}/../Resources/"}
    if tool == "vcxproj" {
      if configuration == "Debug" { "/NODEFAULTLIB:msvcrt.lib" }
      if configuration == "Develop" { "/INCREMENTAL /DEBUG /SAFESEH:NO", -"/OPT:REF /OPT:ICF" }
    } else {
      if configuration == "Develop" { -"-s" }
    }
  }
}
