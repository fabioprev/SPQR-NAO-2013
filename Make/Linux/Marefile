
name = "B-Human"

srcDirRoot = "../../Src"
configDirRoot = "../../Config"
buildDirRoot = "../../Build"
utilDirRoot = "../../Util"
docDirRoot = "../../Doc"
buildDir = "$(buildDirRoot)/$(target)/$(platform)/$(configuration)"

archName = {
  if platform == "Linux" {
    if architecture == "x86_64" { "Linux64" } else { "Linux32" }
  }
  if platform == "Win32" { "Win32" }
  if platform == "MacOSX" { "MacOS" } //there is no 32 bit on mac
}

defines = {
  if platform == "Linux" { "LINUX" }
  if platform == "Win32" { "WIN32", "_WIN32" }
  if platform == "MacOSX" { "MACOSX" }
  if configuration == "Debug" { "_DEBUG" } else { "NDEBUG" }
}

if(host == "Linux") {
  cppCompiler = {
    if archName == "Linux64" {"env CCACHE_CPP2=yes ../../Util/Buildchain/Linux/x86_64/bin/ccache clang++ -D__extern_always_inline=inline"} 
    else {
      if archName == "Linux32" {"env CCACHE_CPP2=yes ../../Util/Buildchain/Linux/x86/bin/ccache clang++ -D__extern_always_inline=inline"}
      else {"clang++"} //fallback
    }
  }
} 

cppFlags = {
  if tool == "vcxproj" {
    "/W3" // warning level 3
    "/GF" // enable string pooling
    "/Gm- /MP" // disable minimal rebuild and enable multi processor compilation
    "/Zc:wchar_t-" // required for Qt
    if configuration == "Debug" { "/Od /ZI" } else { "/Ox /Ob2 /Oi /Ot /Oy /GT /fp:fast /arch:SSE2" }
  } else {
    "-std=c++11"
    "-pipe"
    "-mssse3"
    "-ffast-math"
    "-Wall"
    "-Wliteral-conversion"
    "-Wsign-compare"
    "-Wno-address"
    "-Wno-deprecated"
    "-Wno-dynamic-class-memaccess"
    "-Wno-overloaded-virtual"
    "-Wno-reorder"
    "-Wno-shorten-64-to-32"
    "-Wno-sign-conversion"
    "-Wno-strict-aliasing"
    "-Wno-switch"
    "-Wno-uninitialized"
    "-Wno-unused-parameter"
    if configuration == "Debug" { "-g" } else { "-O3 -fomit-frame-pointer" }
  }
}

linkFlags = {
  if tool == "vcxproj" {
    "/SUBSYSTEM:WINDOWS"
    if configuration == "Debug" { "/INCREMENTAL /DEBUG" } else { "/OPT:REF /OPT:ICF" }
  } else {
    if configuration == "Debug" {} else { "-s" } 
  }
}

targets = {

  all = {
    dependencies = { "SimRobot", "Nao", "bush" },
  }

  include "SimRobot.mare"
  
  include "SimRobotCore2.mare"
  include "SimRobotEditor.mare"
  include "SimRobotHelp.mare"
  
  include "qtpropertybrowser.mare"
  include "libqxt.mare"
  include "Controller.mare"
  include "SimulatedNao.mare"
  
  include "libbhuman.mare"
  include "libgamectrl.mare"
  include "Nao.mare"
  
  include "URC.mare"
  include "bush.mare"
  include "copyfiles.mare"
  
  include "SpecialActions.mare"
  
}

configurations = {
  Develop
  Debug
  Release
}

// a table for adding Qt files (given $(qtRessourceFiles), $(qtRccFiles) and $(qtMocFiles)) to a "files" table 
qtFiles = {
  "$(qtRccFiles)" = qtRccSource + { input += qtRessourceFiles }
  "$(foreach file,$(qtRccFiles),$(buildDir)/qrc_$(basename $(notdir $(file))).cpp)" = cppSource + { folder = ".Qt" }
  if tool == "vcxproj" { "$(qtRessourceFiles)" } // list ressource files in Visual Studio

  "$(qtMocFiles)" = qtMocSource
  "$(foreach file,$(qtMocFiles),$(buildDir)/moc_$(basename $(notdir $(file))).cpp)" = cppSource + { folder = ".Qt" }
}
qtFilesNew = {
  "$(qtRccFiles)" = qtRccSource + { input += qtRessourceFiles }
  "$(foreach file,$(qtRccFiles),$(buildDir)/qrc_$(basename $(notdir $(file))).cpp)" = cppSource + { folder = ".Qt" }
  if tool == "vcxproj" { "$(qtRessourceFiles)" } // list ressource files in Visual Studio

  "$(qtMocFiles)" = qtMocSource
  "$(foreach file,$(qtMocFiles),$(buildDir)/moc_$(basename $(notdir $(file))).cpp)" = cppSource + { folder = ".Qt" }

  "$(qtMocFilesNew)" = qtMocSourceNew

  "$(patsubst %.h,%.cpp,$(qtMocFilesNew))" = cppSource + {
    name = "$(basename $(notdir $(file)))"
    input += "$(buildDir)/moc_$(name).cpp $(buildDir)/$(name).moc"
  },
}

// a rule for compiling a file with Qt's ressouce compiler (rcc)
qtRccSource = {
  message = "$(if $(Win32),$(notdir $(file)),$(file)) (Qt rcc)"
  input = file
  name = "$(basename $(notdir $(file)))"
  output = "$(buildDir)/qrc_$(name).cpp"
  if platform == "Win32" { rcc = "$(utilDirRoot)/SimRobot/Util/qt/Win32/bin/rcc.exe" } else { rcc = "rcc" }
  command = "$(rcc) -name $(name) $(file) -o $(output)"
}

// a rule for compiling a file with Qt's meta object compiler (moc)
qtMocSource = {
  message = "$(if $(Win32),$(notdir $(file)),$(file)) (Qt moc)"
  input = file
  name = "$(basename $(notdir $(file)))"
  output = "$(buildDir)/moc_$(name).cpp"
  if platform == "Win32" { 
    moc = "$(utilDirRoot)/SimRobot/Util/qt/Win32/bin/moc.exe"
    mocFlags = "-D_MSC_VER=1500"
  } else {
    moc = "moc-qt4"
    mocFlags = ""
  }
  command = "$(moc) $(patsubst %,-D%,$(defines)) $(mocFlags) $(patsubst %,-I%,$(includePaths)) $(file) -o $(output)"
}
qtMocSourceNew = {
  message = "$(if $(Win32),$(notdir $(file)),$(file)) (Qt moc)"
  input = file
  name = "$(basename $(notdir $(file)))"
  output = "$(buildDir)/moc_$(name).cpp $(buildDir)/$(name).moc"
  if platform == "Win32" { 
    moc = "$(utilDirRoot)/SimRobot/Util/qt/Win32/bin/moc.exe"
    mocFlags = "-D_MSC_VER=1500"
  } else {
    moc = "moc-qt4"
    mocFlags = ""
  }
  command = {
    "$(moc) $(patsubst %,-D%,$(defines)) $(mocFlags) $(patsubst %,-I%,$(includePaths)) $(file) -o $(buildDir)/moc_$(name).cpp",
    "$(moc) $(patsubst %,-D%,$(defines)) $(mocFlags) $(patsubst %,-I%,$(includePaths)) $(patsubst %.h,%.cpp,$(file)) -nw -o $(buildDir)/$(name).moc",
  }
}

// a rule for copying a file into the build directory
copyFile = {
  message = "$(if $(Win32),$(notdir $(file)),$(file)) (copy)"
  input = file
  output = "$(buildDir)/$(notdir $(file))"
  if platform == "Win32" {
    command = "copy $(subst /,\\,$(file)) $(subst /,\\,$(output))"
  } else { 
    command = "cp $(file) $(output)"
  }
  folder = ".copy"
}

// use mare as buildsystem in CodeLite, CodeBlocks and NetBeans
if tool == "CodeLite" || tool == "CodeBlocks" || tool == "NetBeans" {

  if tool == "CodeBlocks"
    mare = "$(utilDirRoot)/mare/Linux/bin/mare --ignore-dependencies"
  else
    mare = "$(utilDirRoot)/mare/Linux/bin/mare"

  cppApplication += {
    buildCommand = "$(mare) $(target) config=$(configuration)"
    cleanCommand = "$(mare) clean $(target) config=$(configuration)"
    reBuildCommand = "$(mare) rebuild $(target) config=$(configuration)"
  }
  cppStaticLibrary += {
    buildCommand = "$(mare) $(target) config=$(configuration)"
    cleanCommand = "$(mare) clean $(target) config=$(configuration)"
    reBuildCommand = "$(mare) rebuild $(target) config=$(configuration)"
  }
  cppDynamicLibrary += {
    buildCommand = "$(mare) $(target) config=$(configuration)"
    cleanCommand = "$(mare) clean $(target) config=$(configuration)"
    reBuildCommand = "$(mare) rebuild $(target) config=$(configuration)"
  }
  customTool += {
    buildCommand = "$(mare) $(target) config=$(configuration)"
    cleanCommand = "$(mare) clean $(target) config=$(configuration)"
    reBuildCommand = "$(mare) rebuild $(target) config=$(configuration)"
  }
}

